#!/usr/bin/env python3
"""
PDF Report Generator for Bridge Design - Simplified Version
Creates comprehensive A4 PDF reports with all design sheets
"""

try:
    import matplotlib
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    import matplotlib.patches as patches
    from matplotlib.backends.backend_pdf import PdfPages
except ImportError:
    import subprocess, sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "matplotlib"])
    import matplotlib
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    from matplotlib.backends.backend_pdf import PdfPages

import json, os
from datetime import datetime

def create_bridge_pdf_report(results_file_path: str) -> str:
    """Create comprehensive PDF report from JSON results"""
    
    with open(results_file_path, 'r') as f:
        results = json.load(f)
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    pdf_filename = f'Bridge_Design_Report_{timestamp}.pdf'
    pdf_filepath = os.path.join(os.path.dirname(results_file_path), pdf_filename)
    
    print(f"üé® Creating PDF Report: {pdf_filename}")
    
    with PdfPages(pdf_filepath) as pdf:
        
        # Page 1: Title Page (Portrait)
        fig, ax = plt.subplots(figsize=(8.27, 11.69))
        ax.set_xlim(0, 10)
        ax.set_ylim(0, 10)
        ax.axis('off')
        
        # Title
        ax.text(5, 9, 'COMPREHENSIVE BRIDGE DESIGN REPORT', 
                fontsize=16, fontweight='bold', ha='center')
        ax.text(5, 8.5, 'Complete Slab Bridge Analysis & Design', 
                fontsize=12, ha='center')
        
        # Project details
        project_info = results.get('project_info', {})
        ax.text(5, 7.5, f"PROJECT: {project_info.get('bridge_name', 'Sample Bridge')}", 
                fontsize=12, fontweight='bold', ha='center')
        ax.text(5, 7, f"LOCATION: {project_info.get('location', 'Sample Location')}", 
                fontsize=10, ha='center')
        ax.text(5, 6.5, f"DATE: {project_info.get('design_date', 'N/A')}", 
                fontsize=10, ha='center')
        
        # Key results
        estimation = results.get('comprehensive_estimation', {})
        materials = estimation.get('material_summary', {})
        ax.text(5, 5.5, 'KEY RESULTS', fontsize=12, fontweight='bold', ha='center')
        ax.text(5, 5, f"Total Cost: ‚Çπ{estimation.get('total_project_cost', 0):,.0f}", fontsize=11, ha='center')
        ax.text(5, 4.5, f"Concrete: {materials.get('total_concrete', 0):.1f} m¬≥", fontsize=11, ha='center')
        ax.text(5, 4, f"Steel: {materials.get('total_steel', 0):.1f} tonnes", fontsize=11, ha='center')
        ax.text(5, 3.5, f"Status: COMPLETED ‚úÖ", fontsize=11, ha='center', color='green', fontweight='bold')
        
        ax.text(5, 2, 'Generated by Enhanced Bridge Design App 2025', fontsize=9, ha='center')
        pdf.savefig(fig, bbox_inches='tight')
        plt.close(fig)
        
        # Page 2: Project Summary (Portrait)
        fig, ax = plt.subplots(figsize=(8.27, 11.69))
        ax.set_xlim(0, 10)
        ax.set_ylim(0, 10)
        ax.axis('off')
        
        ax.text(5, 9.5, 'PROJECT SUMMARY', fontsize=16, fontweight='bold', ha='center')
        
        # Bridge configuration
        ax.text(1, 8.5, 'BRIDGE CONFIGURATION:', fontsize=11, fontweight='bold', color='navy')
        ax.text(1, 8.2, '‚Ä¢ 3 spans √ó 12.0m = 36.0m total length', fontsize=10)
        ax.text(1, 7.9, '‚Ä¢ Bridge width: 12.5m', fontsize=10)
        ax.text(1, 7.6, '‚Ä¢ Skew angle: 10.0¬∞', fontsize=10)
        
        # Hydraulic analysis
        hydraulic = results.get('hydraulic_analysis', {})
        ax.text(1, 7, 'HYDRAULIC ANALYSIS:', fontsize=11, fontweight='bold', color='navy')
        ax.text(1, 6.7, f'‚Ä¢ Discharge: {hydraulic.get("discharge", 0)} Cumecs', fontsize=10)
        ax.text(1, 6.4, f'‚Ä¢ Afflux: {hydraulic.get("afflux", 0):.3f} m ‚úÖ', fontsize=10, color='green')
        ax.text(1, 6.1, f'‚Ä¢ Waterway: {hydraulic.get("effective_waterway", 0):.1f} m', fontsize=10)
        
        # Materials
        ax.text(1, 5.5, 'MATERIALS & STANDARDS:', fontsize=11, fontweight='bold', color='navy')
        ax.text(1, 5.2, '‚Ä¢ Concrete: M25 (fck = 25 N/mm¬≤)', fontsize=10)
        ax.text(1, 4.9, '‚Ä¢ Steel: Fe415 (fy = 415 N/mm¬≤)', fontsize=10)
        ax.text(1, 4.6, '‚Ä¢ IS 456:2000 & IRC Standards', fontsize=10)
        
        # Foundation
        foundation = results.get('foundation_design', {})
        ax.text(1, 4, 'FOUNDATION DESIGN:', fontsize=11, fontweight='bold', color='navy')
        ax.text(1, 3.7, f'‚Ä¢ Footing: 9.0m √ó 3.5m √ó 1.2m', fontsize=10)
        ax.text(1, 3.4, f'‚Ä¢ Max pressure: {foundation.get("max_pressure", 398):.0f} kN/m¬≤', fontsize=10)
        ax.text(1, 3.1, f'‚Ä¢ Status: {foundation.get("status", "ACCEPTABLE")} ‚úÖ', fontsize=10, color='green')
        
        pdf.savefig(fig, bbox_inches='tight')
        plt.close(fig)
        
        # Page 3: Cost Analysis (Portrait) 
        fig, ax = plt.subplots(figsize=(8.27, 11.69))
        ax.set_xlim(0, 10)
        ax.set_ylim(0, 10)
        ax.axis('off')
        
        ax.text(5, 9.5, 'COST ANALYSIS & QUANTITIES', fontsize=16, fontweight='bold', ha='center')
        
        # Cost summary
        ax.text(1, 8.5, 'PROJECT COST:', fontsize=11, fontweight='bold', color='navy')
        ax.text(1, 8.2, f'‚Ä¢ Total: ‚Çπ{estimation.get("total_project_cost", 0):,.0f}', fontsize=10)
        ax.text(1, 7.9, f'‚Ä¢ Per m¬≤ deck: ‚Çπ{estimation.get("cost_per_sqm_deck", 0):,.0f}', fontsize=10)
        
        # Material quantities
        ax.text(1, 7.3, 'MATERIAL QUANTITIES:', fontsize=11, fontweight='bold', color='navy')
        ax.text(1, 7, f'‚Ä¢ Concrete: {materials.get("total_concrete", 0):.1f} m¬≥', fontsize=10)
        ax.text(1, 6.7, f'‚Ä¢ Steel: {materials.get("total_steel", 0):.1f} tonnes', fontsize=10) 
        ax.text(1, 6.4, f'‚Ä¢ Formwork: {materials.get("total_formwork", 0):.0f} m¬≤', fontsize=10)
        ax.text(1, 6.1, f'‚Ä¢ Excavation: {materials.get("total_excavation", 0):.0f} m¬≥', fontsize=10)
        
        # Cost distribution
        cost_dist = estimation.get('cost_distribution', {})
        ax.text(1, 5.5, 'COST DISTRIBUTION:', fontsize=11, fontweight='bold', color='navy')
        ax.text(1, 5.2, f'‚Ä¢ Pier: {cost_dist.get("pier_cost_percentage", 0):.1f}%', fontsize=10)
        ax.text(1, 4.9, f'‚Ä¢ Abutment: {cost_dist.get("abutment_cost_percentage", 0):.1f}%', fontsize=10)
        ax.text(1, 4.6, f'‚Ä¢ Deck: {cost_dist.get("deck_cost_percentage", 0):.1f}%', fontsize=10)
        
        # Recommendations
        ax.text(1, 4, 'RECOMMENDATIONS:', fontsize=11, fontweight='bold', color='navy')
        ax.text(1, 3.7, '‚úÖ Type-1 Battered Abutment (economical)', fontsize=10, color='green')
        ax.text(1, 3.4, '‚úÖ Design meets all safety requirements', fontsize=10, color='green')
        ax.text(1, 3.1, '‚úÖ Ready for construction approval', fontsize=10, color='green')
        
        pdf.savefig(fig, bbox_inches='tight')
        plt.close(fig)
        
        # Page 4: Charts (Landscape)
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(11.69, 8.27))
        
        # Material pie chart
        quantities = [materials.get('total_concrete', 910), materials.get('total_steel', 83)*10, 
                     materials.get('total_formwork', 1483)/20, materials.get('total_excavation', 473)]
        labels = ['Concrete', 'Steel√ó10', 'Formwork/20', 'Excavation']
        ax1.pie(quantities, labels=labels, autopct='%1.1f%%')
        ax1.set_title('Material Distribution')
        
        # Cost bar chart
        components = ['Pier', 'Abutment', 'Deck']  
        costs = [cost_dist.get('pier_cost_percentage', 22.5),
                cost_dist.get('abutment_cost_percentage', 14.6),
                cost_dist.get('deck_cost_percentage', 39.7)]
        ax2.bar(components, costs)
        ax2.set_title('Cost Distribution (%)')
        ax2.set_ylabel('Percentage')
        
        # Bridge profile
        ax3.set_xlim(0, 50)
        ax3.set_ylim(90, 105)
        ax3.plot([5, 45], [102.4, 102.4], 'k-', linewidth=3, label='Deck')
        ax3.plot([16.75, 16.75], [93.5, 102], 'brown', linewidth=4, label='Pier')
        ax3.plot([29.25, 29.25], [93.5, 102], 'brown', linewidth=4)
        ax3.axhline(y=101.2, color='blue', linestyle='--', alpha=0.7, label='HFL')
        ax3.set_title('Bridge Profile')
        ax3.legend()
        ax3.grid(True, alpha=0.3)
        
        # Summary stats
        ax4.axis('off')
        ax4.text(0.1, 0.9, 'DESIGN SUMMARY', fontsize=12, fontweight='bold')
        ax4.text(0.1, 0.8, f'Total Cost: ‚Çπ{estimation.get("total_project_cost", 0):,.0f}', fontsize=10)
        ax4.text(0.1, 0.7, f'Length: 36.0m (3√ó12m spans)', fontsize=10)
        ax4.text(0.1, 0.6, f'Width: 12.5m', fontsize=10)
        ax4.text(0.1, 0.5, f'Concrete: {materials.get("total_concrete", 0):.0f} m¬≥', fontsize=10)
        ax4.text(0.1, 0.4, f'Steel: {materials.get("total_steel", 0):.0f} tonnes', fontsize=10)
        ax4.text(0.1, 0.2, 'STATUS: ‚úÖ APPROVED', fontsize=11, color='green', fontweight='bold')
        
        plt.tight_layout()
        pdf.savefig(fig, bbox_inches='tight')
        plt.close(fig)
    
    print(f"‚úÖ PDF Report Created: {pdf_filepath}")
    return pdf_filepath

if __name__ == "__main__":
    # Test with sample results file
    results_file = r"c:\Users\Rajkumar\Bridge_Slab_Design\sample_slab_bridge_design_results.json"
    if os.path.exists(results_file):
        pdf_path = create_bridge_pdf_report(results_file)
        print(f"üìÑ Complete PDF report generated: {pdf_path}")
    else:
        print("‚ùå Results file not found. Please run bridge design first.")